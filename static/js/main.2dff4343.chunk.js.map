{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BANNED_WORDS","App","useState","clusterSize","setClusterSize","wordsToHighlight","setWordsToHighLight","submission","setSubmission","text","setText","Box","m","align","Typography","variant","Grid","container","style","maxWidth","spacing","item","xs","TextField","label","type","onChange","value","target","parseInt","multiline","fullWidth","Button","onClick","console","log","processText","words","replace","split","recentWords","forEach","element","word","toLowerCase","trim","length","shift","includes","arr","push","highlightClassName","searchWords","autoEscape","textToHighlight","whiteSpace","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAIMA,EAAe,CAAC,KAAM,KAAM,MAAO,OAAQ,KAAM,MAAQ,OAAS,KAAM,MAAO,MAAO,KAAM,IAAK,IAAK,MAAO,KAAM,KAAM,KAAM,KAAM,OAAQ,KAAM,OAAQ,MAAO,MAAO,KAAM,OAAQ,KAAM,MAAO,OAAQ,KAAM,MAiFzMC,MA/Ef,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEmCF,mBAAS,IAF5C,mBAENG,EAFM,KAEYC,EAFZ,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,KA6Bb,OACE,cAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,eAACD,EAAA,EAAD,CAAKC,EAAE,OAAOC,MAAM,SAApB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,iCAGA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,SAAU,UAAWC,QAAS,EAAtD,UACE,cAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAzB,SACE,cAACC,EAAA,EAAD,CAAWC,MAAM,gBAAgBC,KAAK,SAASC,SAAU,SAASC,GAEtC,MAAtBA,EAAMC,OAAOD,OAEfvB,EAAeyB,SAASF,EAAMC,OAAOD,aAK3C,cAACX,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAzB,SACE,cAACC,EAAA,EAAD,CAAWC,MAAM,QAAQM,WAAW,EAAMC,WAAW,EAAML,SAAU,SAASC,GAElD,MAAtBA,EAAMC,OAAOD,MAEfjB,EAAQiB,EAAMC,OAAOD,OAErBjB,EAAQ,SAMd,cAACM,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAzB,SACE,cAACU,EAAA,EAAD,CAAQC,QAtDlB,WACEC,QAAQC,IAAI1B,GACZyB,QAAQC,IAAIhC,GACZK,EAAcC,GACdH,EAAoB,IACpB,IAAI8B,EAAc3B,EAClByB,QAAQC,IAAIC,GAEZ,IAAIC,GADJD,EAAcA,EAAYE,QAAQ,+BAA+B,MACzCC,MAAM,KAC1BC,EAAc,GAClBN,QAAQC,IAAIE,GACZA,EAAMI,SAAQ,SAAAC,GACZ,IAAIC,EAAOD,EAAQE,cAAcC,OAC7BL,EAAYM,OAAS3C,GACvBqC,EAAYO,QAEVP,EAAYQ,SAASL,KAAW3C,EAAagD,SAASL,IACxDrC,GAAoB,SAAA2C,GAAG,4BAAQA,GAAR,CAAaN,OAEtCH,EAAYU,KAAKP,OAmCX,uBAIF,cAAC3B,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAzB,SACE,cAAC,IAAD,CACE6B,mBAAmB,qBACnBC,YAAa/C,EACbgD,YAAY,EACZC,gBAAiB/C,EACjBW,MAAO,CAACqC,WAAY,WAAYC,UAAW,qBChE1CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2dff4343.chunk.js","sourcesContent":["import { TextField, Box, Grid, Button, Typography} from '@material-ui/core';\nimport Highlighter from \"react-highlight-words\";\nimport React, { useState } from 'react'\n\nconst BANNED_WORDS = ['we', 'or', 'are', 'will', 'my', 'i\\'m', 'i\\'ll', 'me', 'the', 'but', 'is', 'a', 'i', 'and', 'be', 'to', 'of', 'in', 'that', 'it', 'have', 'for', 'not', 'on', 'with', 'he', 'she', 'they', 'at', 'as']\n\nfunction App() {\n  const [clusterSize, setClusterSize] = useState(5);\n  const [wordsToHighlight, setWordsToHighLight] = useState([]);\n  const [submission, setSubmission] = useState('');\n  const [text, setText] = useState('');\n\n  function findWords() {\n    console.log(text);\n    console.log(clusterSize);\n    setSubmission(text);\n    setWordsToHighLight([]);\n    var processText = text;\n    console.log(processText);\n    processText = processText.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\" \");\n    var words = processText.split(' ');\n    var recentWords = [];\n    console.log(words);\n    words.forEach(element => {\n      var word = element.toLowerCase().trim();\n      if (recentWords.length > clusterSize) {\n        recentWords.shift();\n      }\n      if (recentWords.includes(word) && (!BANNED_WORDS.includes(word))) {\n        setWordsToHighLight(arr => [...arr, word]);\n      }\n      recentWords.push(word);\n    });\n  }\n\n  return (\n    <Box m={5}>\n      <Box m='auto' align='center'>\n        <Typography variant='h1'>\n          Colby's Fun Website\n        </Typography>\n        <Grid container style={{maxWidth: '1000px'}} spacing={2}>\n          <Grid container item xs={12}>\n            <TextField label=\"Cluster Size:\" type='number' onChange={function(value) {\n              // console.log(value.target.value);\n              if (value.target.value != null) {\n                // console.log(value.nativeEvent.data);\n                setClusterSize(parseInt(value.target.value));\n              }\n              }}>\n            </TextField>\n          </Grid>\n          <Grid container item xs={12}>\n            <TextField label=\"Text:\" multiline={true} fullWidth={true} onChange={function(value) {\n              // console.log(value.target.value);\n              if (value.target.value != null) {\n                // console.log(value.nativeEvent.data);\n                setText(value.target.value);\n              } else {\n                setText(\"\");\n              }\n              }}>\n\n            </TextField>\n          </Grid>\n          <Grid container item xs={12}>\n            <Button onClick={findWords}>\n              Process\n            </Button>\n          </Grid>\n          <Grid container item xs={12}>\n            <Highlighter\n              highlightClassName=\"YourHighlightClass\"\n              searchWords={wordsToHighlight}\n              autoEscape={false}\n              textToHighlight={submission}\n              style={{whiteSpace: 'pre-line', textAlign: 'left'}}\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}